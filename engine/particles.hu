#ifndef PARTICLES_H
#define PARTICLES_H

#include "typedefs.h"
#include "cudaVec.hu"
#include "algorithms/kernels.hu"

#define REFINEMENTLEVELS 10

class Particles{
public:
    Particles(uint size);

    void setDomain(float nx, float ny, float nz, uint x, uint y, uint z, float cellSize);

    void alignParticlesToGrid();
    void alignParticlesToSubCells();

    void sortParticles();

    void generateVoxels();

    void particleVelToVoxels();

    void setupCudaDevices();

    ~Particles();
private:
    CudaVec<float> px, py, pz;
    CudaVec<float> vx, vy, vz;
    CudaVec<uint> gridCell;

    CudaVec<uint> yDimNumUsedGridNodes;
    
    CudaVec<uint> subCellsTouchedX;
    CudaVec<uint> subCellsTouchedY;
    CudaVec<uint> subCellsTouchedZ; //number of subcells touched by each particle
    
    CudaVec<uint> subCellsX;
    CudaVec<uint> subCellsY;
    CudaVec<uint> subCellsZ; //subcell index list, multiple subcells per particle allowed, indexed by subCellsTouched
    
    CudaVec<uint> reorderedGridIndices;

    CudaVec<uint> uniqueGridNodeIndices;
    CudaVec<uint> gridNodeIndicesToFirstParticleIndex;

    CudaVec<uint> nodeIndexToFirstUsedVoxelX;
    CudaVec<uint> nodeIndexToFirstUsedVoxelY;
    CudaVec<uint> nodeIndexToFirstUsedVoxelZ;

    CudaVec<uint> particleListsX;
    CudaVec<uint> particleListsY;
    CudaVec<uint> particleListsZ;

    CudaVec<uint> voxelIDsX;
    CudaVec<uint> voxelIDsY;
    CudaVec<uint> voxelIDsZ;

    CudaVec<uint> voxelParticleListStartX;
    CudaVec<uint> voxelParticleListStartY;
    CudaVec<uint> voxelParticleListStartZ;

    CudaVec<float> voxelsUx;
    CudaVec<float> voxelsUy;
    CudaVec<float> voxelsUz;

    uint numUsedGridNodes;
    uint numUsedVoxelsX;
    uint numUsedVoxelsY;
    uint numUsedVoxelsZ;
    uint totalNumParticlesInPerVoxelListsX;
    uint totalNumParticlesInPerVoxelListsY;
    uint totalNumParticlesInPerVoxelListsZ;

    uint refinementLevel;
    uint numVoxelsPerNode;
    uint numVoxels1D;
    uint size;
    float radius;
    Grid grid;
    cudaStream_t stream;
    std::vector<cudaDeviceProp> deviceProp;
    std::vector<uint> selectedDevices;

    friend class ParticleSystemTester;
};

#endif