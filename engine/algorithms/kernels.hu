#ifndef KERNELS_H
#define KERNELS_H

#include "../typedefs.h"
#include "../grid.hpp"
#include "../cudaVec.hu"


namespace kernels{
    void cudaFindGridCell(float* px, float* py, float* pz, uint numParticles, Grid grid, uint* gridPosition, cudaStream_t stream);

    void cudaFindSubCell(float* px, float* py, float* pz, uint numParticles, Grid grid, uint* gridPosition, uint* subCellsTouchedX,
     uint* subCellsTouchedY, uint* subCellsTouchedZ, CudaVec<uint>& subCellPositionX, CudaVec<uint>& subCellPositionY,
     CudaVec<uint>& subCellPositionZ, uint numRefinementLevels, float radius, cudaStream_t stream);

    template <typename T>
    void cudaParallelPrefixSum(uint numElements, T* array, T* blockSums, cudaStream_t stream);

    void cudaRadixSortUint(uint numElements, uint* inArray, uint* outArray, uint* sortedIndices, uint* front, uint* back, cudaStream_t frontStream, cudaStream_t backStream, uint*& reorderedIndicesRelativeToOriginal);

    void cudaSortParticlesByGridNode(uint numParticles, uint*& gridPosition, uint*& reorderedIndicesRelativeToOriginal, cudaStream_t stream);

    uint cudaMarkUniqueGridCellsAndCount(uint numParticles, uint* gridPosition, uint* uniqueGridNodes, cudaStream_t stream);

    void cudaMapNodeIndicesToParticles(uint numParticles, uint* uniqueGridNodes, uint* gridNodeIndicesToFirstParticleIndex, cudaStream_t stream);

    void cudaSumParticlesPerNodeAndWriteNumUsedVoxels(uint numGridNodes, uint numParticles, uint* gridNodeIndicesToFirstParticleIndex, uint* subCellsTouchedPerParticle, uint* subCellsDim, uint* numNonZeroVoxels,
        uint* numParticlesInVoxelLists, uint numVoxelsPerNode, cudaStream_t stream);

}



#endif