#ifndef PARALLELPREFIXSUMKERNELS_HU
#define PARALLELPREFIXSUMKERNELS_HU

#include "typedefs.h"

__global__ void parallelPrefix(uint numElements, uint* array, uint* blockSums){
    uint index = threadIdx.x + blockIdx.x*blockDim.x;
    __shared__ uint shared[BLOCKSIZE];
    __shared__ uint blockSum;
    if(index < numElements){
        shared[threadIdx.x] = array[index];
    }
    else{
        shared[threadIdx.x] = 0;
    }
    for(uint i = 0; 1<<(i+1)-1 < BLOCKSIZE; ++i){
        __syncthreads();
        if(((threadIdx.x + 1)<<(i+1)) - 1 < BLOCKSIZE){
            shared[((threadIdx.x + 1)<<(i+1)) - 1] += shared[((threadIdx.x + 1)<<(i+1)) - 1 - (1<<i)];
        }
    }
    __syncthreads();

    if(threadIdx.x == 0){
        blockSum = shared[BLOCKSIZE - 1];
        blockSums[blockIdx.x] = blockSum;
        shared[BLOCKSIZE-1] = 0;
    }
    __syncthreads();
    
    for(int i = sizeof(uint)*8 - __clz(BLOCKSIZE>>1) - 1; i >= 0; --i){
        __syncthreads();
        if(((threadIdx.x + 1)<<(i+1)) - 1 < BLOCKSIZE){
            uint temp = shared[((threadIdx.x + 1)<<(i+1)) - 1];
            shared[((threadIdx.x + 1)<<(i+1)) - 1] += shared[((threadIdx.x + 1)<<(i+1)) - 1 - (1<<i)];
            shared[((threadIdx.x + 1)<<(i+1)) - 1 - (1<<i)] = temp;
        }
    }
    __syncthreads();
    if(index < numElements){
        if(threadIdx.x < blockDim.x-1){
            if(threadIdx.x == numElements-1){
                array[index] = blockSums[blockIdx.x];
            }
            else{
                array[index] = shared[threadIdx.x+1];
            }
        }
        else if(threadIdx.x == blockDim.x-1){
            array[index] = blockSum;
        }

    }
}

__global__ void parallelPrefixApplyPreviousBlockSum(uint numElements, uint* array, uint* blockSums){
    uint index = threadIdx.x + blockIdx.x*blockDim.x;
    __shared__ uint localBlockSums[BLOCKSIZE];
    // __shared__ uint prevBlockSum;
    localBlockSums[threadIdx.x] = 0;
    for(uint i = threadIdx.x; i < blockIdx.x; i += blockDim.x){
        localBlockSums[threadIdx.x] += blockSums[i];
    }
    
    __syncthreads();
    for(uint i = 1; i < blockDim.x; i *= 2){
        uint j = threadIdx.x * 2 * i;
        if(j < blockDim.x){
            localBlockSums[j] += localBlockSums[j + i];
        }
        __syncthreads();
    }
    
    if(index < numElements){
        array[index] += localBlockSums[0];
    }
}

#endif