//Copyright 2023 Aberrant Behavior LLC

#ifndef CUDAVEC_HU
#define CUDAVEC_HU

#include "typedefs.h"
#include <vector>

template <typename T>
__global__ void zeroArray(uint size, T* array){
    uint index = threadIdx.x + blockDim.x*blockIdx.x;
    if(index < size){
        array[index] = 0;
    }
}

template <typename T>
class CudaVec{
public:
    CudaVec();
    CudaVec(const uint& size);
    void resize(const uint& size);
    void resizeAsync(const uint& size, const cudaStream_t& stream);
    T& operator[](const uint& i);
    const T& operator[](const uint& i) const;
    void upload();
    void upload(cudaStream_t stream);
    void download();
    void download(cudaStream_t stream);
    void swapDevicePtr(T* devPtr);
    T* devPtr();
    const T* devPtr() const;
    void clear();
    void clearAsync(cudaStream_t stream);
    void print() const;
    void zeroDevice();
    void zeroDeviceAsync(cudaStream_t stream);
    inline uint size() const{
        return numElements;
    }
    ~CudaVec();

    static uint GPU_MEMORY_ALLOCATED;

private:
    void cuMalloc();
    void cuMallocAsync(const cudaStream_t& stream);
    std::vector<T> vec;
    T* d_vec;
    uint numElements;
};

#endif